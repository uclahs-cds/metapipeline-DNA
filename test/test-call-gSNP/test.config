import nextflow.util.SysHelper

params {
    work_dir = '/scratch/\$SLURM_JOB_ID'
    save_intermediate_files = true
    patient = 'TCEB1'
    project_id = 'test'
    sample_mode = 'paired'

    call_gSNP {
        subworkflow_cpus = SysHelper.getAvailCpus()
        max_number_of_parallel_jobs = 2
        reference_fasta = "/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.fasta"
        bundle_mills_and_1000g_gold_standard_indels_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
        bundle_v0_dbsnp138_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/resources_broad_hg38_v0_Homo_sapiens_assembly38.dbsnp138.vcf.gz"
        bundle_hapmap_3p3_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/hapmap_3.3.hg38.vcf.gz"
        bundle_omni_1000g_2p5_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/1000G_omni2.5.hg38.vcf.gz"
        bundle_phase1_1000g_snps_high_conf_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/1000G_phase1.snps.high_confidence.hg38.vcf.gz"
    }

    arg_map = [:]
    params.call_gSNP.each{ param_key, param_value -> {
            arg_map[param_key] = param_value
        }
    }
    params.call_gSNP.metapipeline_arg_map = arg_map
    params.pipeline_status_directory = "/scratch/${System.getenv('SLURM_JOB_ID')}/PIPELINESTATUSDIRECTORY"

    params.sample_data = [
        '9422T': [
            'patient': 'TCEB1_RCC_S00',
            'state': 'tumor',
            'recalibrate-BAM': ['BAM':'/hot/software/pipeline/metapipeline-DNA/Nextflow/development/meta-germline-somatic/systematic_tests/call-gSNP/inputs/TCEB1/TCEB1_RCC_S00-9422T_027_166.bam', 'contamination_table':'']
        ],
        '9422N': [
            'patient': 'TCEB1_RCC_S00',
            'state': 'normal',
            'recalibrate-BAM': ['BAM':'/hot/software/pipeline/metapipeline-DNA/Nextflow/development/meta-germline-somatic/systematic_tests/call-gSNP/inputs/TCEB1/TCEB1_RCC_S00-9422N-079-114.bam', 'contamination_table':'']
        ]
    ]
}
