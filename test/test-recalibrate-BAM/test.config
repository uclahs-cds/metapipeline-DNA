import nextflow.util.SysHelper

params {
    input_csv = "${launchDir}/test/test-recalibrate-BAM/input.csv"
    work_dir = '/scratch/\$SLURM_JOB_ID'
    save_intermediate_files = true
    patient = 'TCEB1'
    project_id = 'test'
    sample_mode = 'single'

    override_recalibrate_bam = false
    enable_input_deletion_recalibrate_bam = false

    recalibrate_BAM {
        aligner = "BWA-MEM2-2.2.1"
        reference_fasta = "/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.fasta"
        bundle_mills_and_1000g_gold_standard_indels_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
        bundle_known_indels_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Homo_sapiens_assembly38.known_indels.vcf.gz"
        bundle_v0_dbsnp138_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/resources_broad_hg38_v0_Homo_sapiens_assembly38.dbsnp138.vcf.gz"
        bundle_contest_hapmap_3p3_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Biallelic/hapmap_3.3.hg38.BIALLELIC.PASS.2021-09-01.vcf.gz"
        parallelize_by_chromosome = true
        subworkflow_cpus = SysHelper.getAvailCpus()
        max_number_of_parallel_jobs = 2
    }

    arg_map = [:]
    params.recalibrate_BAM.each{ param_key, param_value ->
        if (param_key != 'algorithm') {
            arg_map[param_key] = param_value
        }
    }
    params.recalibrate_BAM.metapipeline_arg_map = arg_map

    params.sample_data = [
        'TCEB1-RCC-S00-9422T-027-166': [
            'recalibrate-BAM': ['BAM':'', 'contamination_table':'']
        ],
        'TCEB1-RCC-S00-9422N-079-114': [
            'recalibrate-BAM': ['BAM':'', 'contamination_table':'']
        ]
    ]
}
