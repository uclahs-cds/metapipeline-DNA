import nextflow.util.SysHelper
includeConfig "${projectDir}/../config/methods.config"

params {
    input_csv = "${launchDir}/test/test-metapipeline-DNA/input.csv"
    leading_work_dir = "/hot/software/pipeline/metapipeline-DNA/Nextflow/development/unreleased/common_work_dir"
    pipeline_work_dir = '/scratch' //For individual pipeline outputs before copying to output_dir
    project_id = 'LUAD0000034'
    save_intermediate_files = true

    partition = 'F32'
    clusterOptions = '--exclusive'
    max_parallel_jobs = 5
    cluster_submission_interval = 5
    uclahs_cds_wgs = false

    input_type = 'BAM'
    metapipeline_log_output_dir = "${params.output_dir}/process-log"

    sample_mode = 'paired'
    override_realignment = false
    override_recalibrate_bam = false
    enable_input_deletion_call_gsnp = true
    pipeline_params {
        convert_BAM2FASTQ {
            get_bam_stats_SAMtools_cpus = 8
            collate_bam_SAMtools_cpus = 8
            // Uncomment to set read group tag values to override that from the original BAMs.
            // This can also be usful if you know your BAM files don't have those tags.
            // sequencing_center =
            // platform_unit =
            // id_for_pu =
        }

        align_DNA {
            enable_spark = true
            mark_duplicates = true
            reference_fasta_bwa = '/hot/ref/tool-specific-input/BWA-MEM2-2.2.1/GRCh38-BI-20160721/index/genome.fa'
            aligner = ['BWA-MEM2']
        }

        recalibrate_BAM {
            max_number_of_parallel_jobs = 2
            aligner = "BWA-MEM2-2.2.1"
            reference_fasta = "/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.fasta"
            bundle_mills_and_1000g_gold_standard_indels_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
            bundle_known_indels_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Homo_sapiens_assembly38.known_indels.vcf.gz"
            bundle_v0_dbsnp138_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/resources_broad_hg38_v0_Homo_sapiens_assembly38.dbsnp138.vcf.gz"
            bundle_contest_hapmap_3p3_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Biallelic/hapmap_3.3.hg38.BIALLELIC.PASS.2021-09-01.vcf.gz"
            parallelize_by_chromosome = true
        }

        call_gSNP {
            reference_fasta = "/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.fasta"
            bundle_mills_and_1000g_gold_standard_indels_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
            bundle_v0_dbsnp138_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/resources_broad_hg38_v0_Homo_sapiens_assembly38.dbsnp138.vcf.gz"
            bundle_hapmap_3p3_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/hapmap_3.3.hg38.vcf.gz"
            bundle_omni_1000g_2p5_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/1000G_omni2.5.hg38.vcf.gz"
            bundle_phase1_1000g_snps_high_conf_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/1000G_phase1.snps.high_confidence.hg38.vcf.gz"
        }

        call_sSNV {
            algorithm = ['somaticsniper', 'strelka2', 'mutect2', 'muse']
            reference = '/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.fasta'
            exome = false
            call_region = '/hot/ref/tool-specific-input/Strelka2/GRCh38/strelka2_call_region.bed.gz'
            intervals = ''
            germline_resource_gnomad_vcf = '/hot/ref/tool-specific-input/GATK/GRCh38/af-only-gnomad.hg38.vcf.gz'
            dbSNP = '/hot/ref/database/dbSNP-155/original/GRCh38/GCF_000001405.39.gz'
        }

        call_mtSNV {
            mt_ref_genome_dir = '/hot/ref/mitochondria_ref/genome_fasta/'
            gmapdb = '/hot/ref/mitochondria_ref/gmapdb/gmapdb_2021-03-08/'
        }

        call_gSV {
            reference_fasta = '/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.fasta'
            exclusion_file = '/hot/ref/tool-specific-input/Delly/GRCh38/human.hg38.excl.tsv'
            mappability_map = '/hot/ref/tool-specific-input/Delly/GRCh38/Homo_sapiens.GRCh38.dna.primary_assembly.fa.r101.s501.blacklist.gz'
        }

        call_sSV {
            algorithm = ['delly', 'manta']
            reference_fasta = '/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.fasta'
            exclusion_file = '/hot/ref/tool-specific-input/Delly/hg38/human.hg38.excl.tsv'
        }
    }
}

methods {
    // Override default methods function
    detect_cpus_and_memory = {
        return ['cpus': SysHelper.getAvailCpus(), 'memory': SysHelper.getAvailMemory()]
    }

    set_pipeline_cpus = {
        serial_pipelines = ['recalibrate-BAM', 'align_DNA', 'call_gSNP']
        def cpus_and_memory = methods.detect_cpus_and_memory()
        if (!cpus_and_memory) {
            return
        }
        cpus = cpus_and_memory['cpus']
        serial_cpus = cpus
        parallel_cpus = (cpus < 8) ? cpus : 8

        params.pipeline_params.each { k, v ->
            v.subworkflow_cpus = (serial_pipelines.contains(k)) ? serial_cpus : parallel_cpus
        }
    }

    is_empty_string = { raw_value ->
        def value_class = raw_value.getClass()
        if (value_class == String || value_class == GString) {
            return raw_value.isEmpty()
        }
        return false
    }

    generate_pipeline_arg_strings = {
        def params_exclude_from_all = ['output_dir', 'input_csv', 'work_dir', 'sample_id', 'patient_id', 'dataset_id', 'input']
        def specific_params_to_exclude = [
            'call_sSNV': ['algorithm']
        ]

        params.pipeline_params.each { pipeline, pipeline_params ->
            Map arg_map = [:]
            def params_to_exclude = (specific_params_to_exclude.containsKey(pipeline)) ? specific_params_to_exclude[pipeline] + params_exclude_from_all : params_exclude_from_all
            pipeline_params.each { param_key, param_value ->
                if (!params_to_exclude.contains(param_key) && !methods.is_empty_string(param_value)) {
                    arg_map[param_key] = param_value
                }
                arg_map['is_pipeline_enabled'] = true
            }

            pipeline_params.metapipeline_arg_map = arg_map
        }
    }
}

methods.set_pipeline_cpus()
methods.generate_pipeline_arg_strings()

trace.enabled = true
trace.file = "${params.output_dir}/nextflow-log/trace.txt"
trace.overwrite = true

timeline.enabled = true
timeline.file = "${params.output_dir}/nextflow-log/timeline.html"
timeline.overwrite = true

report.enabled = true
report.file = "${params.output_dir}/nextflow-log/report.html"
report.overwrite = true
