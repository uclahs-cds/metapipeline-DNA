import nextflow.util.SysHelper

params {
    input_csv = "${launchDir}/test/test-metapipeline-DNA/input.csv"
    work_dir = "/scratch"
    pipeline_work_dir = "/scratch"
    save_intermediate_files = true

    patient = 'GZLUCPTA000001'
    sample = 'GZLUCPTA000001'
    project_id = 'LUAD0000034'

    input_type = 'BAM'
    metapipeline_log_output_dir = "${params.output_dir}/process-log"
    sample_mode = 'single'
    override_realignment = false
    override_call_gsnp = false
    enable_input_deletion_call_gsnp = true
}

methods {
    // Override default methods function
    detect_cpus_and_memory = {
        return ['cpus': SysHelper.getAvailCpus(), 'memory': SysHelper.getAvailMemory()]
    }

    set_pipeline_cpus = {
        def all_pipelines = ['convert_BAM2FASTQ', 'aling_DNA', 'call_gSNP', 'call_sSNV', 'call_mtSNV', 'call_gSV', 'call_sSV']
        def serial_pipelines = ['call_gSNP', 'align_DNA']
        def cpus_and_memory = methods.detect_cpus_and_memory()
        if (!cpus_and_memory) {
            return
        }
        cpus = cpus_and_memory['cpus']
        serial_cpus = cpus
        parallel_cpus = (cpus < 8) ? cpus : 8

        all_pipelines.each { pipeline ->
            params[pipeline].subworkflow_cpus = (serial_pipelines.contains(pipeline)) ? serial_cpus : parallel_cpus
        }
    }
}

methods.set_pipeline_cpus()

trace.enabled = true
trace.file = "${params.output_dir}/nextflow-log/trace.txt"
trace.overwrite = true

timeline.enabled = true
timeline.file = "${params.output_dir}/nextflow-log/timeline.html"
timeline.overwrite = true

report.enabled = true
report.file = "${params.output_dir}/nextflow-log/report.html"
report.overwrite = true
