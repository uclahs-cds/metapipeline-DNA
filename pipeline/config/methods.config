class log_output_dir {
    // Checks if a given path is writable
    // Attempts to create the path if it does not exist
    static def check_permissions(String path) {
      def filePath = new File(path)

      if (filePath.exists()) {
          if (filePath.canWrite()) {
              return
          }
          throw new Exception("${path} is not writable")
      }

      // Attempts to create directory if the path does not exist
      if (!filePath.mkdirs()) {
          throw new Exception("${path} does not exist and could not create")
      }
    }
}

methods {
    set_log_output_dir = {

        def patient
        def sample

        // assumes that patient and samples name are in the pipeline.config
        def reader = new FileReader(params.input_csv)
        reader.splitEachLine(',') { parts -> [patient = parts[0], sample = parts[1]] }

        def date = new Date().format('yyyyMMdd-HHmmss')
        if (params.sge_scheduler) {
              params.avere_prefix = '/data/data'
        } else {
              params.avere_prefix = '/hot/data'
        }

        if (params.blcds_registered_dataset == true) {
            if ("${params.dataset_id.length()}" != 11) {
                 throw new Exception("Dataset id must be eleven characters long")
            }
            def disease = "${params.dataset_id.substring(0,4)}"
            // Need to fill in analyte, technology, raw_od_aligned, genome, pipeline-name
            params.output_log_directory = "${params.avere_prefix}/$disease/${params.dataset_id}/${patient}/${sample}/analyte/technology,raw_or_aligned/genome/log/pipeline-name/$date"
            params.disease = "${disease}"
        } else {
            params.output_log_directory = "${params.output_dir}/$date/log/"
            params.disease = null
        }
        params.patient = "${patient}"
        params.sample = "${sample}"
        params.date = "${date}"
    }

    setup = {
        methods.set_log_output_dir()
        log_output_dir.check_permissions(params.output_log_directory)
    }
}

methods.setup()

timeline {
   enabled = true
    file = "${params.output_log_directory}/timeline.html"
}

trace {
    enabled = true
    file = "${params.output_log_directory}/trace.txt"
}

report {
    enabled = true
    file = "${params.output_log_directory}/report.html"
}
   
docker {
    enabled = true
    sudo = (params.sge_scheduler) ? true : false // Set to true if run on SGE
    
    // Pass user's UID/GID and group IDs to Docker
    uid_and_gid = "-u \$(id -u):\$(id -g)"
    all_group_ids = "\$(for i in `id --real --groups`; do echo -n \"--group-add=\$i \"; done)"

    runOptions = "${uid_and_gid} ${all_group_ids}"
}

// Process specific scope
process {
    executor = "local"
}

workDir = "${params.temp_dir}"
