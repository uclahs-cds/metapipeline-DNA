import nextflow.util.SysHelper
includeConfig "${projectDir}/config/default.config"
includeConfig "${projectDir}/nextflow.config"
includeConfig "${projectDir}/config/methods.config"

params {
    sample_name = ''
    algorithm = params.algorithm_str.split(',').collect() // 'somaticsniper', 'strelka2', 'mutect2'
    tumor = ''
    normal = ''
    reference = ''
    output_dir = '<OUTPUT-DIR-METAPIPELINE>'
    output_log_dir = "${params.output_dir}/log"
    save_intermediate_files = false

    // strelka2 options
    exome = false // adds the '--exome' option when running manta and strelka2

    // mutect2 options
    split_intervals_extra_args = ''
    mutect2_extra_args = ''
    filter_mutect_calls_extra_args = ''
    gatk_command_mem_diff = 500.MB
    scatter_count = 50

    bam_somaticsniper_cpus = 1
    bam_somaticsniper_memory_GB = null
    samtools_pileup_cpus = 1
    samtools_pileup_memory_GB = null
    samtools_varfilter_cpus = 1
    samtools_varfilter_memory_GB = null
    manta_cpus = 8
    strelka2_somatic_cpus = 8
    m2_cpus = 2
    m2_memory_GB = 8
    m2_non_canonical_cpus = 2
    m2_non_canonical_memory_GB = 8
}

process {
    executor = 'local'
}

def node_cpus = SysHelper.getAvailCpus()
def node_mem  = SysHelper.getAvailMemory().toString()

docker {
    enabled = true
    runOptions = "-u \$(id -u):\$(id -g)"
}

trace {
    enabled = true
    file = "${params.output_dir}/trace.txt"
}

timeline {
    enabled = true
    file = "${params.output_dir}/timeline.html"
}

report {
    enabled = true
    file = "${params.output_dir}/report.html"
}

def get_memory(mem) {
    if (mem) {
        return "${mem}GB" as nextflow.util.MemoryUnit
    }
    return null
}

process {
    withName: validate_file {
        cpus = 1
        memory = 1.GB
    }
    withName: bam_somaticsniper {
        cpus = params.bam_somaticsniper_cpus
        memory = get_memory(params.bam_somaticsniper_memory_GB)
    }
    withName: samtools_pileup {
        cpus = params.samtools_pileup_cpus
        memory = get_memory(params.samtools_pileup_memory_GB)
    }
    withName: samtools_varfilter {
        cpus = params.samtools_varfilter_cpus
        memory = get_memory(params.samtools_varfilter_memory_GB)
    }
    withName: manta {
        cpus = params.manta_cpus
    }
    withName: strelka2_somatic {
        cpus = params.strelka2_somatic_cpus
    }
    withName: m2 {
        cpus = params.m2_cpus
        memory = get_memory(params.m2_memory_GB)
    }
    withName: m2_non_canonical {
        cpus = params.m2_non_canonical_cpus
        memory = get_memory(params.m2_non_canonical_memory_GB)
    }
}

methods.setup()