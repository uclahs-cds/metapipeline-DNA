import nextflow.util.SysHelper

params {
    // Dataset params
    dataset_id = '' // Placeholder for now
    blcds_registered_dataset = false // Set to true when using BLCDS folder structure; use false for now
    
    sge_scheduler = false

    // Output directories
    avere_prefix = "/hot/data/" // For slurm "/hot/data"
    output_dir = "<OUTPUT-DIR-METAPIPELINE>"
    java_temp_dir = "/scratch" // Use /scratch for java temp files
    temp_dir = "/scratch" // Use /scratch as Nextflow workDir
    
    // Set to false to disable the publish rule and delete intermediate files as they're no longer needed
    // Disable this option for large input BAMs where /scratch space may not be sufficient
    save_intermediate_files = false
    is_emit_original_quals = true // Set to true by default to emit original qualities

    // Sample info
    input_csv = "/path/to/input.csv"
    is_NT_paired = true // Set to true for normal-tumour paired mode, and to false for normal only mode
    is_DOC_run = false // Set to true to run GATK4 DepthOfCoverage, which is very time-consuming for large BAM

    // Target intervals to process for DNA panel/targeted sequencing samples
    // For WGS, leave this field blank. The intervals will be extracted automatically from the reference dictionary
    // For WXS/WES and targeted sequencing samples: provide path to targets in .list, .intervals, BED file, or VCF file format
    // Defaults to WGS mode
    intervals = ""

    // How many intervals to divide the genome into
    // If you run into memory issues, increase the scatter_count
    scatter_count = 50
    split_intervals_extra_args = ''


    // Reference - Used here hg38 decoy version
    // GATK requires the reference fasta to be accompanied by a .fai index and .dict dictionary associated with the fasta for fast random access
    // These can be found in the same folder as the reference here: /hot/ref/reference/GRCh38-BI-20160721
    reference_fasta = "/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.fasta"
    reference_dict = "/hot/ref/reference/GRCh38-BI-20160721/Homo_sapiens_assembly38.dict"

    // GATK bundle - Used here hg38 decoy version
    bundle_mills_and_1000g_gold_standard_indels_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
    bundle_known_indels_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Homo_sapiens_assembly38.known_indels.vcf.gz"
    bundle_v0_dbsnp138_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/resources_broad_hg38_v0_Homo_sapiens_assembly38.dbsnp138.vcf.gz"
    bundle_hapmap_3p3_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/hapmap_3.3.hg38.vcf.gz"
    bundle_omni_1000g_2p5_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/1000G_omni2.5.hg38.vcf.gz"
    bundle_phase1_1000g_snps_high_conf_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/1000G_phase1.snps.high_confidence.hg38.vcf.gz"
    bundle_contest_hapmap_3p3_vcf_gz = "/hot/ref/tool-specific-input/GATK/GRCh38/Biallelic/hapmap_3.3.hg38.BIALLELIC.PASS.2021-09-01.vcf.gz"
}

def node_cpus = SysHelper.getAvailCpus()
def node_mem  = SysHelper.getAvailMemory().toString()

if (node_cpus == 2 && node_mem == '3 GB') {
    includeConfig "${projectDir}/config/F2.config"
} else if (node_cpus == 72 && node_mem == '136.8 GB') {
    includeConfig "${projectDir}/config/F72.config"
} else if (node_cpus == 64 && node_mem == '950 GB') {
    includeConfig "${projectDir}/config/M64.config"
} else {
    throw new Exception('ERROR: System resources not as expected, unable to assign resources. Detected cpus: ${node_cpus} and memory: ${node_mem}')
}

// Metadata
manifest {
    name = 'call-gSNP'
    author = ["Yash Patel", "Shu Tao", "Stefan Eng"]
    description = 'Nextflow pipeline to call germline short variants in single or normal-tumour paired mode'
    version = '7.0.0'
}

// External config files import
includeConfig "${projectDir}/config/methods.config"