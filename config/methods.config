includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/schema/schema.config"

def get_submodule_version(submodule) {
    def submodule_dir = new File("${projectDir}/external/${submodule}")
    def commit_id = "git rev-parse HEAD".execute(null, submodule_dir).text.readLines()[0]
    return "git describe --tags ${commit_id}".execute(null, submodule_dir).text.readLines()[0]
}

methods {
    set_output_dirs = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)

        params.log_output_dir = "${params.output_dir}/log-${manifest.name}-${date}"
        params.output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}"
    }

    set_pipeline_logs = {
        trace.enabled = true
        trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"
        
        report.enabled = true
        report.file = "${params.log_output_dir}/nextflow-log/report.html"
    }
    
    set_process = {
        process['withName:call_metapipeline_DNA'].executor = params.executor
        process['withName:call_metapipeline_DNA'].maxForks = params.max_parallel_jobs
        process['withName:call_metapipeline_DNA'].cpus = params.per_job_cpus
        process['withName:call_metapipeline_DNA'].memory = "${params.per_job_memory_GB}GB" as nextflow.util.MemoryUnit
        process['withName:call_metapipeline_DNA'].queue = params.partition
        process['withName:call_metapipeline_DNA'].clusterOptions = "${params.clusterOptions}"
    }

    set_submodule_versions = {
        params.version_BAM2FASTQ  = get_submodule_version('pipeline-convert-BAM2FASTQ')
        params.version_align_DNA  = get_submodule_version('pipeline-align-DNA')
        params.version_call_gSNP  = get_submodule_version('pipeline-call-gSNP')
        params.version_call_sSNV  = get_submodule_version('pipeline-call-sSNV')
        params.version_call_mtSNV = get_submodule_version('pipeline-call-mtSNV')
    }

    set_env = {
        // Ensure leading work dir is set to a directory shared between nodes, eg. /hot
        if (params.containsKey('ucla_cds') && params.ucla_cds) {
            if (! params.leading_work_dir.startsWith('/hot')) {
                throw new Exception("The leading_work_dir must be set to a common directory across nodes (ie. in /hot for ucla_cds). Received ${params.leading_work_dir} instead.")
            }
        }

        schema.check_path(params.leading_work_dir, 'w')

        workDir = params.leading_work_dir

        // Only skip the check if ucla_cds is specified and set to false. In all other cases, perform the check.
        if (!(params.containsKey('ucla_cds') && ! params.ucla_cds)) {
            if (! params.pipeline_work_dir.startsWith('/scratch')) {
                System.out.println("Pipeline_work_dir is being set to a directory other than /scratch! Please be very careful about I/O operations and network latency!")
            }
        }
    }

    set_up = {
        methods.set_output_dirs()
        methods.set_pipeline_logs()
        methods.set_process()
        methods.set_submodule_versions()
        methods.set_env()
    }
}
