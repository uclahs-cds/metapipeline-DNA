/**
* This custom schema namespace implements a custom type for checking inputs for metapipeline-DNA
*/
custom_schema_types {
    // TO-DO: Handle the validation!

    allowed_input_types = [
        'BAM',
        'FASTQ',
        'SRC',
        'CRAM'
    ]

    /**
    * Check that input types are in allowed list
    */
    check_input_type_keys = { List given, String name, List choices=custom_schema_types.allowed_input_types ->
        for (elem in given) {
            if (!(elem in choices)) {
                throw new Exception("Invalid key input key `${elem}` received for sample `${name}`. Valid types: ${choices}.")
            }
        }
    }

    /**
    * Check if given input is a Namespace
    */
    check_if_namespace = { val, String name ->
        if (!(val in Map)) {
            throw new Exception("${name} should be a Namespace, not ${val.getClass()}.")
        }
    }

    /**
    * Check if given input is a list
    */
    check_if_list = { val, String name ->
        if (!(val in List || val in Set)) {
            throw new Exception("${name} should be a List, not ${val.getClass()}.")
        }
    }

    /**
    * Check that input is namespace of expected types
    */
    check_input_namespace = { Map options, String name, Map properties ->
        custom_schema_types.check_if_namespace(options[name], name)
        options[name].each { entry ->
            def entry_as_map = [:]
            entry_as_map[entry.key] = entry.value
            schema.validate_parameter(entry_as_map, entry.key, properties.elements['Patient'])
        }
    }

    /**
    * Check that patient entry is namespace of expected types
    */
    check_patient_namespace = { Map options, String name, Map properties ->
        custom_schema_types.check_if_namespace(options[name], name)
        options[name].each { entry ->
            def entry_as_map = [:]
            entry_as_map[entry.key] = entry.value
            schema.validate_parameter(entry_as_map, entry.key, properties.elements['Sample'])
        }
    }

    /**
    * Check that input is namespace of expected types
    */
    check_sample_namespace = { Map options, String name, Map properties ->
        custom_schema_types.check_if_namespace(options[name], name)
        List sample_input_keys = options[name].keySet() as List
        if (options[name].state != 'normal') {
            sample_input_keys.removeAll { it == 'state' }
            assert sample_input_keys.size() > 0 : "Received no input for `${name}`. Please ensure inputs are given for all samples"
            custom_schema_types.check_input_type_keys(sample_input_keys, name)
        }
        properties.elements.each { key, val ->
            schema.validate_parameter(options[name], key, val)
        }
    }

    /**
    * Check if proper entry list
    */
    check_entry_list = { Map options, String name, Map properties ->
        custom_schema_types.check_if_list(options[name], name)
        for (item in options[name]) {
            custom_schema_types.check_if_namespace(item, name)
            properties.elements.each { key, val ->
                schema.validate_parameter(item, key, val)
            }
        }
    }

    /**
    * Check that lane type is Integer or String
    */
    check_lane_type = { Map options, String name, Map properties ->
        if (!(options[name] in String || options[name] in GString || options[name] in Integer)) {
            throw new Exception("${name} should have type Integer or String/GString, not ${options[name].getClass()}")
        }
    }

    types = [
        'InputNamespace': custom_schema_types.check_input_namespace,
        'PatientNamespace': custom_schema_types.check_patient_namespace,
        'SampleNamespace': custom_schema_types.check_sample_namespace,
        'EntryList': custom_schema_types.check_entry_list,
        'LaneType': custom_schema_types.check_lane_type
    ]
}
