includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/csv/csv_parser.config"

/**
*   Namespace for handling input parsing and parameter settings based on inputs
*/
input_handler {
    /**
    *   Parse the input from CSV or YAML into a common format matching automatically loaded YAML input
    */
    parse_input = {
        if (params.containsKey('input')) { // if params.input exists then YAML input is used
            if (params.input.size() > 1) {
                throw new Exception("More than one input is specified in the YAML, please choose one of BAM or CRAM or FASTQ or SRC");
            }
            if (params.input.containsKey('CRAM')) {
                params.input.BAM = params.input.CRAM;
                params.input.remove('CRAM');
            }
        } else if (params.containsKey('input_csv')) { // check if CSV input is used
            reader = new BufferedReader(new FileReader(params.input_csv));
            header_line = reader.readLine().split(','); // reads first line of input csv file and split by comma into list
            if (header_line.contains('read1_fastq')) { // for FASTQ csv
                def fastq_input_fields = ['patient', 'sample', 'state', 'read_group_identifier', 'sequencing_center', 'library_identifier', 'platform_technology', 'platform_unit', 'bam_header_sm', 'lane', 'read1_fastq', 'read2_fastq'];
                params.input.FASTQ = csv_parser.parse_csv(params.input_csv, fastq_input_fields);
                if (!params.input.FASTQ.every { input_line -> input_line.sample == input_line.bam_header_sm }) {
                    throw new Exception("Input FASTQs must have matching sample and bam_hedaer_sm!");
                }
            } else if (header_line.contains('src_input_type')) { // for SRC input
                def src_input_fields = ['patient', 'sample', 'src_input_type', 'algorithm', 'path'];
                params.input.SRC = csv_parser.parse_csv(params.ipnut_csv, src_input_fields);
            } else if (header_line.contains('path')) { // for BAM/CRAM csv
                def bam_input_fields = ['patient', 'sample', 'state', 'path'];
                params.input.BAM = csv_parser.parse_csv(params.input_csv, bam_input_fields);
            } else {
                throw new Exception("Input CSV does not follow the format for either BAM/CRAM or FASTQ or SRC inputs");
            }
        } else {
            throw new Exception("Neither YAML nor CSV inputs found! Please run pipeline with inputs.");
        }

        params.input_type = (params.input.containsKey('BAM')) ? 'BAM' : 'FASTQ';
    }

    /**
    *   Get sample counts from input
    */
    set_sample_counts = {
        return
    }

    /**
    *   Generate the sample data structure for the pipeline run
    */
    generate_sample_data_map = {
        return
    }

    /**
    *   Main function to handle input parsing and parameter setting
    */
    handle_inputs = {
        input_handler.parse_input();
        input_handler.set_sample_counts();
        input_handler.generate_sample_data_map();
        return;
    }
}