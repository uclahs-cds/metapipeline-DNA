/**
*   This namespace contains the function needed for selecting pipelines to run for metapipeline-DNA
*/
pipeline_selector {
    /**
    *   Set the pipeline dependencies based on the input type
    */
    get_pipeline_dependencies = { String input_type='BAM' ->
        List src_related_pipelines = ['call-SRC', 'call-sSNV', 'call-sCNA'];
        if (input_type == 'SRC') {
            return [
                'call-sSNV': [],
                'call-sCNA': [],
                'call-SRC': ['call-sSNV', 'call-sCNA']
            ];
        }

        def dependencies = [
            'recalibrate-BAM': ['align-DNA'],
            'calculate-targeted-coverage': ['align-DNA'],
            'generate-SQC-BAM': ['recalibrate-BAM'],
            'call-gSNP': ['recalibrate-BAM'],
            'call-sSNV': ['recalibrate-BAM'],
            'call-mtSNV': ['recalibrate-BAM'],
            'call-gSV': ['recalibrate-BAM'],
            'call-sSV': ['recalibrate-BAM'],
            'call-sCNA': ['recalibrate-BAM'],
            'call-SRC': ['call-sSNV', 'call-sCNA'],
            'StableLiftsSNV': ['call-sSNV'],
            'StableLiftgSV': ['call-gSV'],
            'StableLiftsSV': ['call-sSV'],
            'StableLiftgSNP': ['call-gSNP'],
            'annotate-gSNP': ['call-gSNP'],
            'call-GeneticAncestry': ['call-gSNP'],
            ]

        if (input_type == 'BAM') {
            dependencies['convert-BAM2FASTQ'] = []
            dependencies['align-DNA'] = ['convert-BAM2FASTQ']
        } else if (input_type == 'FASTQ' || input_type == 'SRC') {
            dependencies['align-DNA'] = []
        } else {
            throw new Exception("### ERROR ### Found unexpected input type: `${input_type}`. Please select from: BAM, FASTQ, SRC")
        }

        return dependencies
    }

    /**
    *   Ensure requested pipelines are valid
    */
    check_pipelines = { Map dependencies, List pipelines ->
        def unexpected_pipelines = []
        pipelines.each{ pipeline ->
            if (! dependencies.containsKey(pipeline)) {
                unexpected_pipelines.add(pipeline)
            }
        }

        if (unexpected_pipelines) {
            throw new Exception("### ERROR ### Found unexpected pipelines: ${unexpected_pipelines}. Expected selection from ${dependencies.keySet()}.")
        }
    }

    resolve_dependencies = { List requested_pipelines, Map pipeline_dependencies ->
        def dependencies_to_check = [] as Queue
        def pipelines_to_run = [] as Set

        requested_pipelines.each{ pipeline ->
            dependencies_to_check.offer(pipeline)
        }

        def curr_pipeline = ''
        while (curr_pipeline = dependencies_to_check.poll()) {
            pipelines_to_run.add(curr_pipeline)
            pipeline_dependencies[curr_pipeline].each{ dependency ->
                dependencies_to_check.offer(dependency)
            }
        }

        return pipelines_to_run as List
    }

    /**
    *   Entry point for selecting pipelines and identifying all pre-requisite pipelines for selection
    */
    get_pipelines = { List requested_pipelines=[], String input_type='BAM' ->
        def pipeline_dependencies = pipeline_selector.get_pipeline_dependencies(input_type)
        if (!requested_pipelines) {
            return pipeline_dependencies.keySet() as List
        }

        pipeline_selector.check_pipelines(pipeline_dependencies, requested_pipelines)

        return pipeline_selector.resolve_dependencies(requested_pipelines, pipeline_dependencies)
    }

    /**
    *   Check and cleanup requested pipeline selection and ordering for given SRC
    */
    check_requested_pipelines = {
        if (!params.src_input_given) {
            return [];
        }

        if (params.override_src_precursor_disable) {
            return [];
        }

        def src_precursor_pipelines = [
            'SNV': 'call-sSNV',
            'CNA': 'call-sCNA'
        ]

        def overlapping_pipelines = [] as Set
        def potential_overlap = null
        params.src_input_types.each { src_input_type ->
            overlapping_pipelines.add(src_precursor_pipelines[src_input_type]);
        }

        overlapping_pipelines.each { overlapping_pipeline ->
            System.out.println("INFO - `${overlapping_pipeline}` will be removed since the corresponding SRC input was provided.")
        }

        return overlapping_pipelines as List;
    }

    /**
    *   Enable given list of pipelines
    */
    enable_pipelines = { List pipelines ->
        def pipeline_name_map = [
            'convert_BAM2FASTQ': ['convert-BAM2FASTQ'],
            'align_DNA': ['align-DNA'],
            'recalibrate_BAM': ['recalibrate-BAM'],
            'calculate_targeted_coverage': ['calculate-targeted-coverage'],
            'generate_SQC_BAM': ['generate-SQC-BAM'],
            'call_gSNP': ['call-gSNP'],
            'call_sSNV': ['call-sSNV'],
            'call_mtSNV': ['call-mtSNV'],
            'call_gSV': ['call-gSV'],
            'call_sSV': ['call-sSV'],
            'call_sCNA': ['call-sCNA'],
            'call_SRC': ['call-SRC'],
            'StableLift': ['StableLiftsSNV', 'StableLiftgSV', 'StableLiftsSV', 'StableLiftgSNP'],
            'annotate_VCF': ['annotate-gSNP'],
            'call_GeneticAncestry': ['call-GeneticAncestry'],
        ];

        pipeline_name_map.each { pipeline_key, pipeline_names ->
            if (!params.pipeline_params.containsKey(pipeline_key)) {
                params.pipeline_params[pipeline_key] = ['is_pipeline_enabled': false];
            }

            List pipelines_requested = pipeline_names.findAll{ element -> pipelines.contains(element) };

            params.pipeline_params[pipeline_key]['is_pipeline_enabled'] = (pipelines_requested) ? true : false;

            if (pipeline_key == 'StableLift') {
                params.pipeline_params[pipeline_key]['lift_modes'] = (pipelines_requested) ?: [];
            }

            if (pipeline_key == 'annotate_VCF') {
                params.pipeline_params[pipeline_key]['pipelines_to_annotate'] = (pipelines_requested) ?: [];
            }
        }
    }

    /**
    *   Resolve selection of pipelines while accounting for dependencies and override options
    */
    resolve_pipeline_selection = { List pipelines_to_remove ->
        def pipelines_to_run = pipeline_selector.get_pipelines(params.requested_pipelines, params.input_type);

        if (params.override_recalibrate_bam) {
            pipelines_to_remove.add('recalibrate-BAM');
        }

        if (params.input_type == 'FASTQ') {
            // Do not allow overriding alignment with FASTQ input
            System.out.println('INFO - FASTQ input detected. Realignment overriding will automatically be disabled.');
            params.override_realignment = false;
        }

        if (params.override_realignment) {
            pipelines_to_remove.add('convert-BAM2FASTQ');
            pipelines_to_remove.add('align-DNA');
        }

        System.out.println("INFO - With the override options, ${pipelines_to_remove} will be skipped.");
        pipelines_to_run.removeAll { pipelines_to_remove.contains(it) };

        if (pipelines_to_run.isEmpty()) {
            throw new Exception("Current pipeline selection settings result in 0 pipelines being run. Please double-check settings.");
        }

        pipeline_selector.enable_pipelines(pipelines_to_run);

        params.enable_input_deletion_recalibrate_bam = pipelines_to_run.contains('align-DNA');
        params.pipelines_to_run = pipelines_to_run;
    }

    /**
    *   Clean up and validate ordering
    */
    clean_pipeline_ordering = { List ordering ->
        // Remove identical adjacent entries
        List cleaned_ordering = [];
        String result_tmp = ordering.inject('') { result, pipeline ->
            if (result != pipeline) {
                cleaned_ordering.add(pipeline);
            }
            return pipeline;
        }

        if (cleaned_ordering != cleaned_ordering.unique(false)) {
            throw new Exception("Resolved pipeline ordering contains identical non-adjacent pipelines: ${cleaned_ordering}");
        }

        return cleaned_ordering;
    }

    /**
    *   Resolve selected ordering of pipelines
    */
    resolve_pipeline_ordering = {
        List pipelines = [
            'generate-SQC-BAM',
            'call-gSNP',
            'call-gSV',
            'call-mtSNV',
            'call-sSNV',
            'call-sSV',
            'call-sCNA',
            'call-SRC'
        ];

        Map pipeline_dependencies = pipeline_selector.get_pipeline_dependencies(params.input_type);

        String default_predecessor = 'recalibrate-BAM';
        Map pipeline_predecessor = [:];

        // Default to no specific ordering, with just the raw dependencies
        pipelines.each { k ->
            pipeline_predecessor[k] = pipeline_dependencies.get(k) ?: [default_predecessor];
        }

        if (params.containsKey('downstream_pipeline_order') && params.downstream_pipeline_order) {
            // Check ordering is subset of resolved pipelines to run
            List pipelines_to_order = params.downstream_pipeline_order;
            def disabled_pipelines_in_ordering = pipelines_to_order - params.pipelines_to_run;
            if (!disabled_pipelines_in_ordering.isEmpty()) {
                System.out.println("INFO - With the selected pipelines and the given ordering, ${disabled_pipelines_in_ordering} will be removed from the ordering.");
                pipelines_to_order.removeAll { disabled_pipelines_in_ordering.contains(it) };
            }

            if (!pipelines_to_order.isEmpty()) {
                pipelines_to_order = [default_predecessor] + pipeline_selector.clean_pipeline_ordering(pipelines_to_order)
                for (pipeline_index in 1..pipelines_to_order.size()-1) {
                    pipeline_predecessor[pipelines_to_order.get(pipeline_index)].add(pipelines_to_order.get(pipeline_index-1))
                }
            }
        }

        params.pipeline_predecessor = pipeline_predecessor;
    }

    /**
    *   Pipeline selection handler entry point
    */
    handle_pipeline_selection = {
        def pipelines_to_remove = pipeline_selector.check_requested_pipelines();
        pipeline_selector.resolve_pipeline_selection(pipelines_to_remove);
        pipeline_selector.resolve_pipeline_ordering();
    }
}
